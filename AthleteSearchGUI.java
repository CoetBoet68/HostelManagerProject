
package PAT;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
adminSearchGUI class
Used as interface for the user to find the athlete in the database they are looking for
*/
public class AthleteSearchGUI extends javax.swing.JFrame {
    public String foundID = ""; //variable to store the found Athlete's ID
    public String userType =""; //The type of the current user
    public String userWelcome = "";
    Athlete ath = new Athlete();
    /*
    Constructor Method
    Used when a new instance of the AthleteSearchGUI is created
    @parameters: String userType, String user welcome message
    @return: none
    */
    public AthleteSearchGUI(String _userType, String _userWelcome) {
        userType = _userType;
        userWelcome = _userWelcome;
        initComponents();
       
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnAthHelp = new javax.swing.JButton();
        lblProgramName = new javax.swing.JLabel();
        txtFieldNameSearch = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFoundAthletes = new javax.swing.JTable();
        txtFieldSearchID = new javax.swing.JTextField();
        lblAthID = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnBack.setText("BACK");
        btnBack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAthHelp.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnAthHelp.setText("Help");
        btnAthHelp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnAthHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAthHelpActionPerformed(evt);
            }
        });

        lblProgramName.setBackground(new java.awt.Color(255, 255, 255));
        lblProgramName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblProgramName.setText("Athlete Search");
        lblProgramName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        txtFieldNameSearch.setText("Enter Name Here");
        txtFieldNameSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFieldNameSearchMouseClicked(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        tblFoundAthletes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "AthleteID", "Name", "Surname", "Grade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFoundAthletes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFoundAthletesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblFoundAthletes);

        txtFieldSearchID.setEditable(false);
        txtFieldSearchID.setBackground(new java.awt.Color(255, 255, 255));

        lblAthID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAthID.setText("ID:");

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(lblProgramName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(btnAthHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblAthID)
                .addGap(72, 72, 72)
                .addComponent(txtFieldSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(txtFieldNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(btnSelect)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProgramName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAthHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAthID))
                .addGap(18, 18, 18)
                .addComponent(btnSelect)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    Method of the Back Button
    Opens an instance of the AthleteGUI class and then closes the AthleteSearchGUI class
    */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        AthleteGUI ath = new AthleteGUI(userType, userWelcome);
        ath.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed
    /*
    Method of the help button
    Opens the help text
    */
    private void btnAthHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAthHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAthHelpActionPerformed
    /*
    Method txtFieldNameSearchMouseClicked
    Clears the existing text when the user clicks on the text field
    */
    private void txtFieldNameSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFieldNameSearchMouseClicked
        txtFieldNameSearch.setText("");
    }//GEN-LAST:event_txtFieldNameSearchMouseClicked
    /*
    Method of the Find button
    Updates the table with Athletes that match the name provided as input
    */
    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        String name = txtFieldNameSearch.getText(); //get name the user provides
        updateSearchTable(name); //populate the table with matches
    }//GEN-LAST:event_btnFindActionPerformed
    /*
    Method tblFoundAthletesMouseClicked
    Loads the ID of the athlete selected into the text Field
    */
    private void tblFoundAthletesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFoundAthletesMouseClicked
        int row = tblFoundAthletes.rowAtPoint(evt.getPoint()); //check row position of athlete selected
        //Populate text field with athlete ID
        txtFieldSearchID.setText((String)tblFoundAthletes.getValueAt(row, 0));
    }//GEN-LAST:event_tblFoundAthletesMouseClicked
    /*
    Method of the Select Button
    Sends the ID of the found Athlete back to the AthleteGUI so it can be loaded into the data
    fields there
    */
    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        if(txtFieldSearchID.getText().isEmpty() == false){
            foundID = txtFieldSearchID.getText();
            AthleteGUI ath = new AthleteGUI(userType, userWelcome, foundID);
            ath.setVisible(true);
            dispose();
        }else{
            //Advise user to select an Athlete first
            JOptionPane.showMessageDialog(null, "No Athlete is selected. Please select an athlete.");
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AthleteSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AthleteSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AthleteSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AthleteSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AthleteSearchGUI("","").setVisible(true);
            }
        });
    }
    /*
    Method UpdateSearchTable
    Inserts all the Athlete's that match the input name into the table
    @parameters: String name provided by the user
    @return: none
    */
    private void updateSearchTable(String name){
        clearTable(); //clear table of existing data
        try {
            ResultSet rs = ath.findAthlete(name); //get athletes that match name
            while(rs.next()){
                //Extract athlete's from resultset
                String ID = rs.getString("AthleteID");
                String _name = rs.getString("athName");
                String sName = rs.getString("athSurname");
                String athGrade = rs.getString("athGrade");
                
                String data[] = {ID, _name, sName,athGrade};
                
                DefaultTableModel model = (DefaultTableModel)tblFoundAthletes.getModel();
                //Enter Athlete's into Table
                model.addRow(data);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(AthleteSearchGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /*
    Method clearTable
    Clears the table of the current information it holds
    */
    private void clearTable(){
        DefaultTableModel model = (DefaultTableModel)tblFoundAthletes.getModel();
        while(model.getRowCount()> 0){
            model.removeRow(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAthHelp;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAthID;
    private javax.swing.JLabel lblProgramName;
    private javax.swing.JTable tblFoundAthletes;
    private javax.swing.JTextField txtFieldNameSearch;
    private javax.swing.JTextField txtFieldSearchID;
    // End of variables declaration//GEN-END:variables
}
