package PAT;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
/*
Class MealGUI
Front end of the Meal class and provides the user's with an interface to see what ingredients
are needed for a specific recipe
*/
public class MealGUI extends javax.swing.JFrame {
    String userWelcome = ""; //Welcome message displayed in the Main GUI
    String userType = ""; //The type of the current user
    Meal meal = new Meal(); //An instance of the meal class
    ResultSet rs; //resultset to store the data gathered by the meal class
    public MealGUI(String _userType, String _userWelcome) {
        userType = _userType; 
        userWelcome = _userWelcome;
        initComponents();
        //enter the recipe names into the combo box so the user can select it
        populateComboBox(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupMealType = new javax.swing.ButtonGroup();
        btnMenu = new javax.swing.JButton();
        lblStockGUI = new javax.swing.JLabel();
        btnStockHelp = new javax.swing.JButton();
        lblMealType = new javax.swing.JLabel();
        radBtnBreakfast = new javax.swing.JRadioButton();
        radBtnLunch = new javax.swing.JRadioButton();
        radBtnDinner = new javax.swing.JRadioButton();
        lblRecipe = new javax.swing.JLabel();
        cmbRecipeName = new javax.swing.JComboBox<>();
        btnStartMeal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrep = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnMenu.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnMenu.setText("BACK");
        btnMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        lblStockGUI.setBackground(new java.awt.Color(255, 255, 255));
        lblStockGUI.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblStockGUI.setText("               Meal");
        lblStockGUI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        btnStockHelp.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnStockHelp.setText("Help");
        btnStockHelp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnStockHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockHelpActionPerformed(evt);
            }
        });

        lblMealType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblMealType.setText("Type: ");

        btnGroupMealType.add(radBtnBreakfast);
        radBtnBreakfast.setSelected(true);
        radBtnBreakfast.setText("Breakfast");
        radBtnBreakfast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnBreakfastActionPerformed(evt);
            }
        });

        btnGroupMealType.add(radBtnLunch);
        radBtnLunch.setText("Lunch");
        radBtnLunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnLunchActionPerformed(evt);
            }
        });

        btnGroupMealType.add(radBtnDinner);
        radBtnDinner.setText("Dinner");
        radBtnDinner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnDinnerActionPerformed(evt);
            }
        });

        lblRecipe.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblRecipe.setText("Recipe:");

        btnStartMeal.setText("Start Meal");
        btnStartMeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartMealActionPerformed(evt);
            }
        });

        tblPrep.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPrep);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStockGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStockHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMealType)
                                    .addComponent(lblRecipe))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(radBtnBreakfast)
                                        .addGap(18, 18, 18)
                                        .addComponent(radBtnLunch))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(cmbRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(radBtnDinner)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnStartMeal)
                        .addGap(188, 188, 188))))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStockHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStockGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMealType)
                    .addComponent(radBtnBreakfast)
                    .addComponent(radBtnLunch)
                    .addComponent(radBtnDinner))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRecipe)
                    .addComponent(cmbRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnStartMeal)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    Method of the back button
    Returns to the Main GUI and closes the Meal GUI
    */
    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        dispose();
        MainGUI mai = new MainGUI(userType, userWelcome);
        mai.setVisible(true);
    }//GEN-LAST:event_btnMenuActionPerformed
    /*
    Method of the Help button
    Opens the  help text
    */
    private void btnStockHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStockHelpActionPerformed
    /*
    Method of the Lunch radio button
    Updates the combo box with only recipes of the lunch type
    */
    private void radBtnLunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnLunchActionPerformed
        populateComboBox();
    }//GEN-LAST:event_radBtnLunchActionPerformed
    /*
    Method of the Breakfast radio button
    Updates the combo box with only recipes of the breakfast type
    */
    private void radBtnBreakfastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnBreakfastActionPerformed
        populateComboBox();
    }//GEN-LAST:event_radBtnBreakfastActionPerformed
    /*
    Method of the Dinner radio button
    Updates the combo box with only recipes of the dinner type
    */
    private void radBtnDinnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnDinnerActionPerformed
        populateComboBox();
    }//GEN-LAST:event_radBtnDinnerActionPerformed
    /*
    Method of the start meal button
    Determines the amount of certain ingredients needed for a recipe
    and displays it to the user
    */
    private void btnStartMealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartMealActionPerformed
        String ID = meal.getRecipeID((String)cmbRecipeName.getSelectedItem());
        updatePrepTable(ID);
    }//GEN-LAST:event_btnStartMealActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MealGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MealGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MealGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MealGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MealGUI("","").setVisible(true);
            }
        });
    }
    /*
    Method populateComboBox
    Checks what recipe type is selected and then populates the combo box with
    only recipes of that type 
    @parameters: none
    @return: none
    */
    private void populateComboBox(){
        clearPrepTable(); 
        cmbRecipeName.removeAllItems();
        try {
            //Check what recipe type is selected
            String rType = selectedType();
            //Get all the recipes of that type from the meal class
            rs = meal.getRecipeNames(rType);
            while(rs.next()){
                //add all those recipes to the combo box as options
                cmbRecipeName.addItem(rs.getString("recipeName"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(MealGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /*
    Method selectedType
    Sees which radio button has been selected
    @parameters: none
    @return: String recipe type
    */
    private String selectedType(){
        String rType = "";
        if(radBtnBreakfast.isSelected()){
            rType = radBtnBreakfast.getText();
        }else if(radBtnLunch.isSelected()){
            rType = radBtnLunch.getText();
        }else if(radBtnDinner.isSelected()){
            rType = radBtnDinner.getText();
        }
        return rType;
    }
    /*
    Method clearPrepTable
    Clears the prep table of all its current info
    @parameters: none
    @return: none
    */
    private void clearPrepTable(){
        DefaultTableModel model = (DefaultTableModel)tblPrep.getModel();
        while(model.getRowCount()> 0){
            model.removeRow(0);
        }
    }
    /*
    Method updatePrepTable
    Gets the ingredients needed for a recipe and displays it to the user
    @parameters: String recipe ID
    @return: none
    */
    private void updatePrepTable(String _id){
        clearPrepTable();
        try {
            //Get ingredients needed for recipe
            rs = meal.getIngredients(_id);
            while(rs.next()){
                //extract ingredient info from result
                String ID = rs.getString("itemID");
                String itemName = meal.getItemName(ID);
                int amountPerAth = rs.getInt("inQuantity");
                //Determine the total amount for each ingredient needed for the recipe
                String totalAmount = String.valueOf(amountPerAth*meal.getAthleteAmount());
                String data[] = {ID, itemName, totalAmount};
                
                DefaultTableModel model = (DefaultTableModel)tblPrep.getModel();
                //add ingredient and amount to the table
                model.addRow(data);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(MealGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupMealType;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnStartMeal;
    private javax.swing.JButton btnStockHelp;
    private javax.swing.JComboBox<String> cmbRecipeName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMealType;
    private javax.swing.JLabel lblRecipe;
    private javax.swing.JLabel lblStockGUI;
    private javax.swing.JRadioButton radBtnBreakfast;
    private javax.swing.JRadioButton radBtnDinner;
    private javax.swing.JRadioButton radBtnLunch;
    private javax.swing.JTable tblPrep;
    // End of variables declaration//GEN-END:variables
}
